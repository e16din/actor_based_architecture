Привет!

Меня зовут Александр и я разрабатываю Android-приложения, на моем счету около 50-ти разного рода приложений, средних, маленьких и больших. 

У меня есть мечта - сделать разработку мобильных приложений простой и убрать оверхед из своих проектов.

Я тут хотел обойти острые углы и сосредоточиться на позитиве, но как-то все получается слишком ванильным, добавлю щепотку гнева.

Меня задолбало что для написания простого приложения надо писать горы оторванных от реальности абстракций. Меня задолбало что чем больше становится проект тем сложнее разбираться в его коде. Меня задолбало что я долго разбираюсь с кодом других разработчиков, а другие разработчики долго разбираются с моим кодом. Меня задолбало что подходы призванные упростить работу с кодом, усложняют структуру этого кода. Меня задолбало.. можем продолжить список в комментариях ;)

В итоге я замахнулся на святое - я решил придумать такую архитектуру, которая бы была проста в реализации, очевидно-понятна без лишних объяснений, легко масштабировалась на любого размера проект. И да, чтобы не надо было для этой архитектуры делать громоздкий фреймворк.

Как-то раз с моей женой(она как раз училась на философском) мы завели разговор про объективирование и субъект-субъектные отношения, и тут меня осенило!

А что если описать бизнес процессы не упрощенно и утилитарно, как мы привыкли делать, пишем все с позиции приложения, в лучшем случае с позиции приложения и пользователя. Что если полностью описать все субъекты участвующие в бизнес-процессе? Каких таких субъектов? Субъекты - это по сути действующие лица, не просто утилитарные объекты, а объекты которые могут действовать. Объект то на что действуют, субъект тот кто действует. Приложение - это субъект. Экран приложения - это тоже субъект. Пользователь который взаимодействует с экраном приложения - это субъект. Сервер - это субъект. Операционная система телефона - это субъект. Наличие этих всех субъектов характерно для большинства мобильных приложений(в некоторых может быть несколько типов пользователей - например заказчик и исполнитель - это разные субъекты).

Я переложил философские идеи субъект-субъектного взаимодействия на архитектуру мобильного приложения и получил способ моделирования наиболее полного бизнесс-процесса, на основе моделирования действующих субъектов на каждом экране приложения. 

Раньше большинство субъектов были где-то там в головах разработчиков, менеджеров и бизнеса, а теперь мы моделируем бизнесс-процесс явно описывая взаимодействие всех субъектов.

Каждый экран по сути это субъект, он может взаимодействовать с пользователем который тоже субъект, так же он может взаимодействовать с сервером, и он может взаимодействовать с операционной системой телефона, и один экран может взаимодействовать с другим экраном(например передавать или получать данные), само приложение это тоже субъект(у него есть файловое хранилище например, или может быть база данных) и с приложением субъектом может взаимодействовать любой экран-субъект.

Давайте посмотрим на схему экрана приложения такси:

![taxi_main_screen](taxi_main_screen.png)


Как это работает - пример

- теория систем - взаимодействие систем

Что это дает

- ТРИЗ - идеальная система

К чему это ведет?


Я знаю что мою статью будут читать специалисты в области мобильной разработки, и я прошу вас попробовать этот подход на практике, поэкспериментировать с ним, познакомиться с ним на личном опыте.

Я делюсь с вами этими наработками и хочу получить от вас обратную связь, замечания и предложения.

Буду рад если этот подход сделает процесс разработки более простым и удобным для всех нас :)



==============

P.S. я придумывал название репозитория и одним из вариантов подумалось назвать subject_oriented_programming, я решил поискать вдруг уже кто-то использова это название и наткнулся на вот эту интересную статью в википедии https://en.wikipedia.org/wiki/Subject-oriented_programming

По сути я описал что-то похожее, в применении к мобильной разработке.

Живем в одном информационном пространстве дамы и господа :)
